<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        
        {% for stylesheet in stylesheets %}
        <link href="{{ stylesheet }}" rel="stylesheet" />
        {% endfor %} 
        
        {% for script in scripts %}
        <script type="text/javascript" src="{{ script }}"></script>
        {% endfor %}
    </head>
    
    <body style="margin: 0; padding: 0">
        <div
            id="root"
            style="display: flex; flex-wrap: wrap; width: 100%"
        ></div>
        <script>
            var plots = {{ plots }}; 
            var theme = {{ theme }};
        </script>
        <script>
            var createElement = function(tagname, props, children){
                const element = document.createElement(tagname)

                if(props){
                    for(var key in props){
                        if(typeof props[key]  === 'object'){
                            props[key] = Object.entries(props[key]).map(function(value){
                                return `${value[0]}:${value[1]};`
                            }).reduce((prev, curr) => prev + curr)
                        }
                        element.setAttribute(key, props[key]);
                    }
                }
                if(children){
                    if(Array.isArray(children)){
                        for(let i = 0; i < children.length; i++){
                            if(typeof children[i] == "string"){
                                element.innerHTML += children[i];
                            }
                            else{
                                element.appendChild(children[i])
                            }
                        }
                    }
                    else{
                        if(typeof children == "string"){
                            element.innerHTML += children;
                        }
                        else{
                            element.appendChild(children)
                        }
                    }
                }
                return element
            }

            document.addEventListener('DOMContentLoaded', function () {
                Highcharts.setOptions(theme);

                plots.forEach(function (plot, i) {
                    var container = createElement(
                        "div",
                        {"id":`container[${i}]`, "style":"width:" + plot.width}
                    );

                    document.getElementById("root").appendChild(container)

                    try{
                        if(plot.chart.chart && plot.chart.chart.type == "map"){
                            var chart = Highcharts.mapChart(`container[${i}]`, plot.chart);
                        }
                        else {
                            var chart = Highcharts.chart(
                                `container[${i}]`, 
                                {
                                    ...plot.chart, 
                                    exporting:{
                                        ...plot.chart.exporting, 
                                        "menuItemDefinitions": {
                                            "copy": {
                                                onclick: function () {
                                                    return callback()
                                                },
                                                text: 'Copy as PNG'
                                            }
                                        },
                                        "buttons": {
                                            "contextButton": {
                                                "menuItems": ["copy", "separator", "viewFullscreen", "printChart", "separator", "downloadPNG", "downloadJPEG", "downloadPDF", "downloadSVG",]
                                            }
                                        }
                                    }
                                }
                            );

                            var callback = function (chart, options) {
                                // copy chart to clipboard as PNG
                                var callback = function () {
                                    var canvas = document.createElement('canvas');
                                    canvas.height = chart.chartHeight * options.scale;
                                    canvas.width = chart.chartWidth * options.scale;

                                    var image = new Image(
                                        canvas.width,
                                        canvas.height
                                    );

                                    image.onload = function () {
                                        canvas.getContext("2d").drawImage(image, 0, 0, image.width, image.height);

                                        canvas.toBlob(blob => {
                                            return navigator.clipboard.write([
                                                new ClipboardItem({
                                                    'image/png': blob
                                                })
                                            ]).catch(e => {
                                                console.log("Error", e)
                                            });
                                        }, "image/png")
                                    };

                                    image.src = 'data:image/svg+xml,' + encodeURIComponent(chart.getSVG());
                                }
                                return callback
                            }(chart, { scale: 2 })
                        }
                    }
                    catch(error){
                        document.getElementById("root").removeChild(container);

                        var container = createElement(
                            "div",
                            {
                                "style":{
                                    "background-color":"rgba(255, 82, 82, 0.1)",
                                    "border":"1px solid rgba(255, 82, 82, 1)",
                                    "box-sizing":"border-box",
                                    "padding":"8px",
                                    "width":"100%"

                                }
                            },
                            [
                                createElement(
                                    "p",
                                    {"style":"font-family:sans-serif;margin:0;font-size:0.9rem;border-bottom:1px dashed red;"},
                                    ["There was an error rendering your chart. Check the error message below and your chart definition"]
                                ),
                                    createElement(
                                    "p",
                                    {"style":"font-family:sans-serif;font-family:Monospace;"},
                                    [error.message]
                                ),
                                    createElement("p", {"style":"font-family:sans-serif;font-size:0.9rem;border-bottom:1px dashed red;"}, [
                                    "Chart definition"
                                ]),
                                createElement("code", null, [
                                    createElement("pre", null, JSON.stringify(plot.chart, null, 2))
                                ]),
                                createElement(
                                    "p",
                                    {"style":"font-family:sans-serif;margin:0;font-size:0.9rem;border-bottom:1px dashed red;"},
                                    "If you believe this a bug, please report it on the easychart github page"
                                )
                            ]
                        )
                        document.getElementById("root").appendChild(
                            container
                        )
                    }
                })
            });
        </script>
    </body>
</html>
